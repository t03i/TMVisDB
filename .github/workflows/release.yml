name: Build and Release to Production
on:
    push:
        branches:
            - main

permissions:
    id-token: write
    contents: write
    packages: write

jobs:
    determine-release:
        runs-on: ubuntu-latest

        outputs:
            release_needed: ${{ steps.semantic_release.outputs.release_needed }}
            tag: ${{ steps.semantic_release.outputs.tag }}
        env:
            UV_TOOL_DIR: /tmp/.uv-tool

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  ref: ${{ github.sha }}

            - name: Force correct release branch
              run: |
                  git checkout -B ${{ github.ref_name }} ${{ github.sha }}

            - name: Install uv
              uses: astral-sh/setup-uv@v3
              with:
                  tool-bin-dir: "/tmp/tool-bin"

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version-file: "backend/pyproject.toml"

            - name: Restore uv tools
              uses: actions/cache@v4
              with:
                  path: /tmp/tool-bin
                  key: uv-tools-${{ runner.os }}-psr-v9.11.1
                  restore-keys: |
                      uv-tools-${{ runner.os }}-psr-v9.11.1
                      uv-tools-${{ runner.os }}

            - name: Install Python Semantic Release
              env:
                  UV_TOOL_DIR: /tmp/release-tool-bin
              run: uv tool install python-semantic-release@v9.11.1

            - name: Run Semantic Release
              id: semantic_release
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  echo "Checking for release and setting version in files"
                  output=$(uv tool run --from python-semantic-release semantic-release -c releaserc.toml version --commit --push --tag --changelog --no-vcs-release)
                  echo "DEBUG: Output is:"
                  echo "$output"
                  version=$(uv tool run --from python-semantic-release semantic-release -c releaserc.toml --noop version --print-last-released-tag 2>/dev/null)

                  # More robust check using case-insensitive grep and partial match
                  if echo "$output" | grep -i "no release will be made\|no release necessary" > /dev/null; then
                    echo "DEBUG: No release needed detected"
                    echo "release_needed=false" >> $GITHUB_OUTPUT
                  else
                    echo "DEBUG: Release is needed"
                    echo "release_needed=true" >> $GITHUB_OUTPUT
                  fi
                  echo "tag=$version" >> $GITHUB_OUTPUT

    build-frontend-docker:
        needs: determine-release
        if: needs.determine-release.outputs.release_needed == 'true'
        uses: ./.github/workflows/frontend-docker.yml
        with:
            tag: ${{ needs.determine-release.outputs.tag }}
        secrets: inherit

    build-backend-docker:
        needs: determine-release
        if: needs.determine-release.outputs.release_needed == 'true'
        uses: ./.github/workflows/backend-docker.yml
        with:
            tag: ${{ needs.determine-release.outputs.tag }}
        secrets: inherit

    build-frontend:
        needs: [build-frontend-docker, determine-release]
        if: needs.determine-release.outputs.release_needed == 'true'
        uses: ./.github/workflows/frontend.yml
        with:
            tag: ${{ needs.determine-release.outputs.tag }}
        secrets: inherit

    release-github:
        needs: [build-backend-docker, build-frontend, determine-release]
        if: needs.determine-release.outputs.release_needed == 'true'
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  ref: ${{ needs.determine-release.outputs.tag }}
            - name: Download Build Artifacts
              uses: actions/download-artifact@v4
              with:
                  name: frontend-build
                  path: dist/
            - name: Create GitHub Release
              uses: softprops/action-gh-release@v2
              with:
                  files: dist/
                  tag_name: ${{ needs.determine-release.outputs.tag }}
                  body_path: CHANGELOG.md

    release-docker-backend:
        needs: [release-github, build-backend-docker, determine-release]
        if: needs.determine-release.outputs.release_needed == 'true'
        uses: ./.github/workflows/docker-release.yml
        secrets: inherit
        with:
            release_tag: ${{ needs.determine-release.outputs.tag }}
            image_name: ${{ vars.REGISTRY }}/${{ vars.BACKEND_IMAGE_NAME }}
            old_tag: main

    release-docker-frontend:
        needs: [release-github, build-frontend-docker, determine-release]
        if: needs.determine-release.outputs.release_needed == 'true'
        secrets: inherit
        uses: ./.github/workflows/docker-release.yml
        with:
            release_tag: ${{ needs.determine-release.outputs.tag }}
            image_name: ${{ vars.REGISTRY }}/${{ vars.FRONTEND_IMAGE_NAME }}
            old_tag: main-dev
