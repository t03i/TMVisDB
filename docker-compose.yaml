services:
  caddy:
    image: lucaslorentz/caddy-docker-proxy:2.9
    ports:
      - 80:80
      - 443:443
    restart: always
    environment:
      - CADDY_INGRESS_NETWORKS=caddy-public
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - caddy-data:/data
      - caddy-config:/config
    networks:
      - caddy

  backend:
    image: '${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}'
    restart: always
    networks:
      - caddy
    command: ["fastapi", "run", "--host", "0.0.0.0", "app/main.py", "--proxy-headers","--port", "8000"]
    env_file:
      - .env
    environment:
      - DOMAIN=${API_DOMAIN}
      - ENVIRONMENT=${NODE_ENV}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - SENTRY_DSN=${SENTRY_DSN}
      - SQLITE_DATABASE_PATH=${SQLITE_DATABASE_PATH}
    volumes:
      - ./backend/data/tmvis.db:/app/data/tmvis.db:ro
    build:
      context: .
      dockerfile: backend.Dockerfile
      args:
        INSTALL_DEV: false
    platform: linux/amd64
    labels:
      caddy: ${API_DOMAIN?Variable not set}, www.${API_DOMAIN?Variable not set}
      caddy.@match.path: /api /api/* /docs /docs/* /redoc /redoc/*
      caddy.reverse_proxy: "@match backend:8000"

  # Frontend service remains commented out, but here's how it would look:
  # frontend:
  #   labels:
  #     - caddy=${API_DOMAIN?Variable not set}, www.${API_DOMAIN?Variable not set}
  #     - caddy.@www-redirect.redir_regexp = ^https?://www\.(.+)/(.*) https://{re.1}/$2
  #     - caddy.handle = @www-redirect
  #     - caddy.handle = reverse_proxy {{upstreams 80}}

volumes:
  caddy-data:
  caddy-config:

networks:
  caddy:
    external: false
