services:
  traefik:
    image: traefik:3.0
    ports:
      - 80:80
      - 443:443
    restart: always
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.routers.traefik-dashboard-http.entrypoints=http
      - traefik.http.routers.traefik-dashboard-http.rule=Host(`traefik.${API_DOMAIN?Variable not set}`)
      - traefik.http.routers.traefik-dashboard-https.entrypoints=https
      - traefik.http.routers.traefik-dashboard-https.rule=Host(`traefik.${API_DOMAIN?Variable not set}`)
      - traefik.http.routers.traefik-dashboard-https.tls=true
      - traefik.http.routers.traefik-dashboard-https.tls.certresolver=le
      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-public-certificates:/certificates
    command:
      - --providers.docker
      - --providers.docker.exposedbydefault=false
      - --entrypoints.http.address=:80
      - --entrypoints.https.address=:443
      - --certificatesresolvers.le.acme.email=${CERT_EMAIL?Variable not set}
      - --certificatesresolvers.le.acme.storage=/certificates/acme.json
      - --certificatesresolvers.le.acme.tlschallenge=true
      - --accesslog
      - --log
    networks:
      - traefik-public

  backend:
    image: '${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}'
    restart: always
    networks:
      - traefik-public
    command: ["fastapi", "run", "--host", "0.0.0.0", "app/main.py", "--proxy-headers","--port", "80"]
    env_file:
      - .env
    environment:
      - DOMAIN=${API_DOMAIN}
      - ENVIRONMENT=${NODE_ENV}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - SENTRY_DSN=${SENTRY_DSN}
      - SQLITE_DATABASE_PATH=${SQLITE_DATABASE_PATH}
    volumes:
      - ./backend/data/tmvis.db:/data/tmvis.db:ro

    build:
      context: .
      dockerfile: backend.Dockerfile
      args:
        INSTALL_DEV: false
    platform: linux/amd64
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public

      - traefik.http.services.${STACK_NAME?Variable not set}-backend.loadbalancer.server.port=80

      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.rule=(Host(`${API_DOMAIN?Variable not set}`) || Host(`www.${API_DOMAIN?Variable not set}`)) && (PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`))
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.entrypoints=http

      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.rule=(Host(`${API_DOMAIN?Variable not set}`) || Host(`www.${API_DOMAIN?Variable not set}`)) && (PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`))
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.entrypoints=https
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.tls=true
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.tls.certresolver=le

      # Define Traefik Middleware to handle domain with and without "www" to redirect to only one
      - traefik.http.middlewares.${STACK_NAME?Variable not set}-www-redirect.redirectregex.regex=^http(s)?://www.(${API_DOMAIN?Variable not set})/(.*)
      # Redirect a domain with www to non-www
      - traefik.http.middlewares.${STACK_NAME?Variable not set}-www-redirect.redirectregex.replacement=http$${1}://${API_DOMAIN?Variable not set}/$${3}

      # Enable www redirection for HTTP and HTTPS
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.middlewares=https-redirect,${STACK_NAME?Variable not set}-www-redirect
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.middlewares=${STACK_NAME?Variable not set}-www-redirect=label

  # frontend:
  #   image: '${DOCKER_IMAGE_FRONTEND?Variable not set}:${TAG-latest}'
  #   restart: always
  #   networks:
  #     - traefik-public
  #     - default
  #   build:
  #     context: ./frontend
  #     args:
  #       - VITE_API_URL=https://${API_DOMAIN?Variable not set}
  #       - NODE_ENV=production
  #   labels:
  #     - traefik.enable=true
  #     - traefik.docker.network=traefik-public
  #     - traefik.constraint-label=traefik-public

  #     - traefik.http.services.${STACK_NAME?Variable not set}-frontend.loadbalancer.server.port=80

  #     - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-http.rule=Host(`${API_DOMAIN?Variable not set}`) || Host(`www.${API_DOMAIN?Variable not set}`)
  #     - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-http.entrypoints=http

  #     - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-https.rule=Host(`${API_DOMAIN?Variable not set}`) || Host(`www.${API_DOMAIN?Variable not set}`)
  #     - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-https.entrypoints=https
  #     - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-https.tls=true
  #     - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-https.tls.certresolver=le

  #     # Enable www redirection for HTTP and HTTPS
  #     - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-https.middlewares=${STACK_NAME?Variable not set}-www-redirect
  #     - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-http.middlewares=https-redirect,${STACK_NAME?Variable not set}-www-redirect


volumes:
  # Create a volume to store the certificates, even if the container is recreated
  traefik-public-certificates:

networks:
  # Use the previously created public network "traefik-public", shared with other
  # services that need to be publicly available via this Traefik
  traefik-public:
